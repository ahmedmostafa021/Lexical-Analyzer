# front.py - lexical analyzer for simple arithmetic expressions using string input

from io import StringIO

LETTER = 0
DIGIT = 1
UNKNOWN = 99
EOF = -1

# Token codes
INT_LIT = 10
IDENT = 11
ASSIGN_OP = 20
ADD_OP = 21
SUB_OP = 22
MULT_OP = 23
DIV_OP = 24
LEFT_PAREN = 25
RIGHT_PAREN = 26

# Globals
charClass = None
lexeme = []
lexLen = 0
nextChar = ''
token = None
nextToken = None
in_fp = None


def addChar():
    global lexeme, lexLen
    if lexLen <= 98:
        lexeme.append(nextChar)
        lexLen += 1
    else:
        print("Error - lexeme is too long")


def getChar():
    global nextChar, charClass, in_fp
    nextChar = in_fp.read(1)
    if nextChar == '':
        charClass = EOF
    elif nextChar.isalpha():
        charClass = LETTER
    elif nextChar.isdigit():
        charClass = DIGIT
    else:
        charClass = UNKNOWN


def getNonBlank():
    global nextChar
    while nextChar.isspace():
        getChar()


def lookup(ch):
    global nextToken
    if ch == '(':
        addChar()
        nextToken = LEFT_PAREN
    elif ch == ')':
        addChar()
        nextToken = RIGHT_PAREN
    elif ch == '+':
        addChar()
        nextToken = ADD_OP
    elif ch == '-':
        addChar()
        nextToken = SUB_OP
    elif ch == '*':
        addChar()
        nextToken = MULT_OP
    elif ch == '/':
        addChar()
        nextToken = DIV_OP
    elif ch == '=':
        addChar()
        nextToken = ASSIGN_OP
    else:
        addChar()
        nextToken = UNKNOWN
    return nextToken


def lex():
    global lexLen, lexeme, nextToken, charClass
    lexeme = []
    lexLen = 0
    getNonBlank()
    if charClass == LETTER:
        addChar()
        getChar()
        while charClass == LETTER or charClass == DIGIT:
            addChar()
            getChar()
        nextToken = IDENT
    elif charClass == DIGIT:
        addChar()
        getChar()
        while charClass == DIGIT:
            addChar()
            getChar()
        nextToken = INT_LIT
    elif charClass == UNKNOWN:
        lookup(nextChar)
        getChar()
    elif charClass == EOF:
        nextToken = EOF
        lexeme.extend(['E', 'O', 'F'])
    print(f"Next token is: {nextToken}, Next lexeme is: {''.join(lexeme)}")
    return nextToken


# Modified main function to accept string input
def analyze_expression(input_string):
    global in_fp
    in_fp = StringIO(input_string)
    getChar()
    while True:
        lex()
        if nextToken == EOF:
            break


# Example usage
if __name__ == "__main__":
    expr = "sum = (25 + 36) / 2"
    analyze_expression(expr)
